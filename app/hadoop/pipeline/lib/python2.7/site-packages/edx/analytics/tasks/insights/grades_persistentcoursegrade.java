// ORM class for table 'grades_persistentcoursegrade'
// WARNING: This class is AUTO-GENERATED. Modify at your own risk.
//
// Debug information:
// Generated date: Mon Jun 03 15:13:28 IST 2019
// For connector: org.apache.sqoop.manager.DirectMySQLManager
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.Writable;
import org.apache.hadoop.mapred.lib.db.DBWritable;
import com.cloudera.sqoop.lib.JdbcWritableBridge;
import com.cloudera.sqoop.lib.DelimiterSet;
import com.cloudera.sqoop.lib.FieldFormatter;
import com.cloudera.sqoop.lib.RecordParser;
import com.cloudera.sqoop.lib.BooleanParser;
import com.cloudera.sqoop.lib.BlobRef;
import com.cloudera.sqoop.lib.ClobRef;
import com.cloudera.sqoop.lib.LargeObjectLoader;
import com.cloudera.sqoop.lib.SqoopRecord;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

public class grades_persistentcoursegrade extends SqoopRecord  implements DBWritable, Writable {
  private final int PROTOCOL_VERSION = 3;
  public int getClassFormatVersion() { return PROTOCOL_VERSION; }
  protected ResultSet __cur_result_set;
  private Long id;
  public Long get_id() {
    return id;
  }
  public void set_id(Long id) {
    this.id = id;
  }
  public grades_persistentcoursegrade with_id(Long id) {
    this.id = id;
    return this;
  }
  private Integer user_id;
  public Integer get_user_id() {
    return user_id;
  }
  public void set_user_id(Integer user_id) {
    this.user_id = user_id;
  }
  public grades_persistentcoursegrade with_user_id(Integer user_id) {
    this.user_id = user_id;
    return this;
  }
  private String course_id;
  public String get_course_id() {
    return course_id;
  }
  public void set_course_id(String course_id) {
    this.course_id = course_id;
  }
  public grades_persistentcoursegrade with_course_id(String course_id) {
    this.course_id = course_id;
    return this;
  }
  private java.sql.Timestamp course_edited_timestamp;
  public java.sql.Timestamp get_course_edited_timestamp() {
    return course_edited_timestamp;
  }
  public void set_course_edited_timestamp(java.sql.Timestamp course_edited_timestamp) {
    this.course_edited_timestamp = course_edited_timestamp;
  }
  public grades_persistentcoursegrade with_course_edited_timestamp(java.sql.Timestamp course_edited_timestamp) {
    this.course_edited_timestamp = course_edited_timestamp;
    return this;
  }
  private String course_version;
  public String get_course_version() {
    return course_version;
  }
  public void set_course_version(String course_version) {
    this.course_version = course_version;
  }
  public grades_persistentcoursegrade with_course_version(String course_version) {
    this.course_version = course_version;
    return this;
  }
  private String grading_policy_hash;
  public String get_grading_policy_hash() {
    return grading_policy_hash;
  }
  public void set_grading_policy_hash(String grading_policy_hash) {
    this.grading_policy_hash = grading_policy_hash;
  }
  public grades_persistentcoursegrade with_grading_policy_hash(String grading_policy_hash) {
    this.grading_policy_hash = grading_policy_hash;
    return this;
  }
  private Double percent_grade;
  public Double get_percent_grade() {
    return percent_grade;
  }
  public void set_percent_grade(Double percent_grade) {
    this.percent_grade = percent_grade;
  }
  public grades_persistentcoursegrade with_percent_grade(Double percent_grade) {
    this.percent_grade = percent_grade;
    return this;
  }
  private String letter_grade;
  public String get_letter_grade() {
    return letter_grade;
  }
  public void set_letter_grade(String letter_grade) {
    this.letter_grade = letter_grade;
  }
  public grades_persistentcoursegrade with_letter_grade(String letter_grade) {
    this.letter_grade = letter_grade;
    return this;
  }
  private java.sql.Timestamp passed_timestamp;
  public java.sql.Timestamp get_passed_timestamp() {
    return passed_timestamp;
  }
  public void set_passed_timestamp(java.sql.Timestamp passed_timestamp) {
    this.passed_timestamp = passed_timestamp;
  }
  public grades_persistentcoursegrade with_passed_timestamp(java.sql.Timestamp passed_timestamp) {
    this.passed_timestamp = passed_timestamp;
    return this;
  }
  private java.sql.Timestamp created;
  public java.sql.Timestamp get_created() {
    return created;
  }
  public void set_created(java.sql.Timestamp created) {
    this.created = created;
  }
  public grades_persistentcoursegrade with_created(java.sql.Timestamp created) {
    this.created = created;
    return this;
  }
  private java.sql.Timestamp modified;
  public java.sql.Timestamp get_modified() {
    return modified;
  }
  public void set_modified(java.sql.Timestamp modified) {
    this.modified = modified;
  }
  public grades_persistentcoursegrade with_modified(java.sql.Timestamp modified) {
    this.modified = modified;
    return this;
  }
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof grades_persistentcoursegrade)) {
      return false;
    }
    grades_persistentcoursegrade that = (grades_persistentcoursegrade) o;
    boolean equal = true;
    equal = equal && (this.id == null ? that.id == null : this.id.equals(that.id));
    equal = equal && (this.user_id == null ? that.user_id == null : this.user_id.equals(that.user_id));
    equal = equal && (this.course_id == null ? that.course_id == null : this.course_id.equals(that.course_id));
    equal = equal && (this.course_edited_timestamp == null ? that.course_edited_timestamp == null : this.course_edited_timestamp.equals(that.course_edited_timestamp));
    equal = equal && (this.course_version == null ? that.course_version == null : this.course_version.equals(that.course_version));
    equal = equal && (this.grading_policy_hash == null ? that.grading_policy_hash == null : this.grading_policy_hash.equals(that.grading_policy_hash));
    equal = equal && (this.percent_grade == null ? that.percent_grade == null : this.percent_grade.equals(that.percent_grade));
    equal = equal && (this.letter_grade == null ? that.letter_grade == null : this.letter_grade.equals(that.letter_grade));
    equal = equal && (this.passed_timestamp == null ? that.passed_timestamp == null : this.passed_timestamp.equals(that.passed_timestamp));
    equal = equal && (this.created == null ? that.created == null : this.created.equals(that.created));
    equal = equal && (this.modified == null ? that.modified == null : this.modified.equals(that.modified));
    return equal;
  }
  public boolean equals0(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof grades_persistentcoursegrade)) {
      return false;
    }
    grades_persistentcoursegrade that = (grades_persistentcoursegrade) o;
    boolean equal = true;
    equal = equal && (this.id == null ? that.id == null : this.id.equals(that.id));
    equal = equal && (this.user_id == null ? that.user_id == null : this.user_id.equals(that.user_id));
    equal = equal && (this.course_id == null ? that.course_id == null : this.course_id.equals(that.course_id));
    equal = equal && (this.course_edited_timestamp == null ? that.course_edited_timestamp == null : this.course_edited_timestamp.equals(that.course_edited_timestamp));
    equal = equal && (this.course_version == null ? that.course_version == null : this.course_version.equals(that.course_version));
    equal = equal && (this.grading_policy_hash == null ? that.grading_policy_hash == null : this.grading_policy_hash.equals(that.grading_policy_hash));
    equal = equal && (this.percent_grade == null ? that.percent_grade == null : this.percent_grade.equals(that.percent_grade));
    equal = equal && (this.letter_grade == null ? that.letter_grade == null : this.letter_grade.equals(that.letter_grade));
    equal = equal && (this.passed_timestamp == null ? that.passed_timestamp == null : this.passed_timestamp.equals(that.passed_timestamp));
    equal = equal && (this.created == null ? that.created == null : this.created.equals(that.created));
    equal = equal && (this.modified == null ? that.modified == null : this.modified.equals(that.modified));
    return equal;
  }
  public void readFields(ResultSet __dbResults) throws SQLException {
    this.__cur_result_set = __dbResults;
    this.id = JdbcWritableBridge.readLong(1, __dbResults);
    this.user_id = JdbcWritableBridge.readInteger(2, __dbResults);
    this.course_id = JdbcWritableBridge.readString(3, __dbResults);
    this.course_edited_timestamp = JdbcWritableBridge.readTimestamp(4, __dbResults);
    this.course_version = JdbcWritableBridge.readString(5, __dbResults);
    this.grading_policy_hash = JdbcWritableBridge.readString(6, __dbResults);
    this.percent_grade = JdbcWritableBridge.readDouble(7, __dbResults);
    this.letter_grade = JdbcWritableBridge.readString(8, __dbResults);
    this.passed_timestamp = JdbcWritableBridge.readTimestamp(9, __dbResults);
    this.created = JdbcWritableBridge.readTimestamp(10, __dbResults);
    this.modified = JdbcWritableBridge.readTimestamp(11, __dbResults);
  }
  public void readFields0(ResultSet __dbResults) throws SQLException {
    this.id = JdbcWritableBridge.readLong(1, __dbResults);
    this.user_id = JdbcWritableBridge.readInteger(2, __dbResults);
    this.course_id = JdbcWritableBridge.readString(3, __dbResults);
    this.course_edited_timestamp = JdbcWritableBridge.readTimestamp(4, __dbResults);
    this.course_version = JdbcWritableBridge.readString(5, __dbResults);
    this.grading_policy_hash = JdbcWritableBridge.readString(6, __dbResults);
    this.percent_grade = JdbcWritableBridge.readDouble(7, __dbResults);
    this.letter_grade = JdbcWritableBridge.readString(8, __dbResults);
    this.passed_timestamp = JdbcWritableBridge.readTimestamp(9, __dbResults);
    this.created = JdbcWritableBridge.readTimestamp(10, __dbResults);
    this.modified = JdbcWritableBridge.readTimestamp(11, __dbResults);
  }
  public void loadLargeObjects(LargeObjectLoader __loader)
      throws SQLException, IOException, InterruptedException {
  }
  public void loadLargeObjects0(LargeObjectLoader __loader)
      throws SQLException, IOException, InterruptedException {
  }
  public void write(PreparedStatement __dbStmt) throws SQLException {
    write(__dbStmt, 0);
  }

  public int write(PreparedStatement __dbStmt, int __off) throws SQLException {
    JdbcWritableBridge.writeLong(id, 1 + __off, -5, __dbStmt);
    JdbcWritableBridge.writeInteger(user_id, 2 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(course_id, 3 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(course_edited_timestamp, 4 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(course_version, 5 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(grading_policy_hash, 6 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeDouble(percent_grade, 7 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeString(letter_grade, 8 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(passed_timestamp, 9 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeTimestamp(created, 10 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeTimestamp(modified, 11 + __off, 93, __dbStmt);
    return 11;
  }
  public void write0(PreparedStatement __dbStmt, int __off) throws SQLException {
    JdbcWritableBridge.writeLong(id, 1 + __off, -5, __dbStmt);
    JdbcWritableBridge.writeInteger(user_id, 2 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeString(course_id, 3 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(course_edited_timestamp, 4 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeString(course_version, 5 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(grading_policy_hash, 6 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeDouble(percent_grade, 7 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeString(letter_grade, 8 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeTimestamp(passed_timestamp, 9 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeTimestamp(created, 10 + __off, 93, __dbStmt);
    JdbcWritableBridge.writeTimestamp(modified, 11 + __off, 93, __dbStmt);
  }
  public void readFields(DataInput __dataIn) throws IOException {
this.readFields0(__dataIn);  }
  public void readFields0(DataInput __dataIn) throws IOException {
    if (__dataIn.readBoolean()) { 
        this.id = null;
    } else {
    this.id = Long.valueOf(__dataIn.readLong());
    }
    if (__dataIn.readBoolean()) { 
        this.user_id = null;
    } else {
    this.user_id = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.course_id = null;
    } else {
    this.course_id = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.course_edited_timestamp = null;
    } else {
    this.course_edited_timestamp = new Timestamp(__dataIn.readLong());
    this.course_edited_timestamp.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.course_version = null;
    } else {
    this.course_version = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.grading_policy_hash = null;
    } else {
    this.grading_policy_hash = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.percent_grade = null;
    } else {
    this.percent_grade = Double.valueOf(__dataIn.readDouble());
    }
    if (__dataIn.readBoolean()) { 
        this.letter_grade = null;
    } else {
    this.letter_grade = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.passed_timestamp = null;
    } else {
    this.passed_timestamp = new Timestamp(__dataIn.readLong());
    this.passed_timestamp.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.created = null;
    } else {
    this.created = new Timestamp(__dataIn.readLong());
    this.created.setNanos(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.modified = null;
    } else {
    this.modified = new Timestamp(__dataIn.readLong());
    this.modified.setNanos(__dataIn.readInt());
    }
  }
  public void write(DataOutput __dataOut) throws IOException {
    if (null == this.id) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.id);
    }
    if (null == this.user_id) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.user_id);
    }
    if (null == this.course_id) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, course_id);
    }
    if (null == this.course_edited_timestamp) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.course_edited_timestamp.getTime());
    __dataOut.writeInt(this.course_edited_timestamp.getNanos());
    }
    if (null == this.course_version) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, course_version);
    }
    if (null == this.grading_policy_hash) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, grading_policy_hash);
    }
    if (null == this.percent_grade) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.percent_grade);
    }
    if (null == this.letter_grade) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, letter_grade);
    }
    if (null == this.passed_timestamp) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.passed_timestamp.getTime());
    __dataOut.writeInt(this.passed_timestamp.getNanos());
    }
    if (null == this.created) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.created.getTime());
    __dataOut.writeInt(this.created.getNanos());
    }
    if (null == this.modified) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.modified.getTime());
    __dataOut.writeInt(this.modified.getNanos());
    }
  }
  public void write0(DataOutput __dataOut) throws IOException {
    if (null == this.id) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.id);
    }
    if (null == this.user_id) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.user_id);
    }
    if (null == this.course_id) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, course_id);
    }
    if (null == this.course_edited_timestamp) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.course_edited_timestamp.getTime());
    __dataOut.writeInt(this.course_edited_timestamp.getNanos());
    }
    if (null == this.course_version) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, course_version);
    }
    if (null == this.grading_policy_hash) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, grading_policy_hash);
    }
    if (null == this.percent_grade) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.percent_grade);
    }
    if (null == this.letter_grade) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, letter_grade);
    }
    if (null == this.passed_timestamp) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.passed_timestamp.getTime());
    __dataOut.writeInt(this.passed_timestamp.getNanos());
    }
    if (null == this.created) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.created.getTime());
    __dataOut.writeInt(this.created.getNanos());
    }
    if (null == this.modified) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeLong(this.modified.getTime());
    __dataOut.writeInt(this.modified.getNanos());
    }
  }
  private static final DelimiterSet __outputDelimiters = new DelimiterSet((char) 1, (char) 10, (char) 0, (char) 0, false);
  public String toString() {
    return toString(__outputDelimiters, true);
  }
  public String toString(DelimiterSet delimiters) {
    return toString(delimiters, true);
  }
  public String toString(boolean useRecordDelim) {
    return toString(__outputDelimiters, useRecordDelim);
  }
  public String toString(DelimiterSet delimiters, boolean useRecordDelim) {
    StringBuilder __sb = new StringBuilder();
    char fieldDelim = delimiters.getFieldsTerminatedBy();
    __sb.append(FieldFormatter.escapeAndEnclose(id==null?"\\N":"" + id, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(user_id==null?"\\N":"" + user_id, delimiters));
    __sb.append(fieldDelim);
    // special case for strings hive, replacing delimiters \n,\r,\01 with ' ' from strings
    __sb.append(FieldFormatter.hiveStringReplaceDelims(course_id==null?"\\N":course_id, " ", delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(course_edited_timestamp==null?"\\N":"" + course_edited_timestamp, delimiters));
    __sb.append(fieldDelim);
    // special case for strings hive, replacing delimiters \n,\r,\01 with ' ' from strings
    __sb.append(FieldFormatter.hiveStringReplaceDelims(course_version==null?"\\N":course_version, " ", delimiters));
    __sb.append(fieldDelim);
    // special case for strings hive, replacing delimiters \n,\r,\01 with ' ' from strings
    __sb.append(FieldFormatter.hiveStringReplaceDelims(grading_policy_hash==null?"\\N":grading_policy_hash, " ", delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(percent_grade==null?"\\N":"" + percent_grade, delimiters));
    __sb.append(fieldDelim);
    // special case for strings hive, replacing delimiters \n,\r,\01 with ' ' from strings
    __sb.append(FieldFormatter.hiveStringReplaceDelims(letter_grade==null?"\\N":letter_grade, " ", delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(passed_timestamp==null?"\\N":"" + passed_timestamp, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(created==null?"\\N":"" + created, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(modified==null?"\\N":"" + modified, delimiters));
    if (useRecordDelim) {
      __sb.append(delimiters.getLinesTerminatedBy());
    }
    return __sb.toString();
  }
  public void toString0(DelimiterSet delimiters, StringBuilder __sb, char fieldDelim) {
    __sb.append(FieldFormatter.escapeAndEnclose(id==null?"\\N":"" + id, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(user_id==null?"\\N":"" + user_id, delimiters));
    __sb.append(fieldDelim);
    // special case for strings hive, replacing delimiters \n,\r,\01 with ' ' from strings
    __sb.append(FieldFormatter.hiveStringReplaceDelims(course_id==null?"\\N":course_id, " ", delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(course_edited_timestamp==null?"\\N":"" + course_edited_timestamp, delimiters));
    __sb.append(fieldDelim);
    // special case for strings hive, replacing delimiters \n,\r,\01 with ' ' from strings
    __sb.append(FieldFormatter.hiveStringReplaceDelims(course_version==null?"\\N":course_version, " ", delimiters));
    __sb.append(fieldDelim);
    // special case for strings hive, replacing delimiters \n,\r,\01 with ' ' from strings
    __sb.append(FieldFormatter.hiveStringReplaceDelims(grading_policy_hash==null?"\\N":grading_policy_hash, " ", delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(percent_grade==null?"\\N":"" + percent_grade, delimiters));
    __sb.append(fieldDelim);
    // special case for strings hive, replacing delimiters \n,\r,\01 with ' ' from strings
    __sb.append(FieldFormatter.hiveStringReplaceDelims(letter_grade==null?"\\N":letter_grade, " ", delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(passed_timestamp==null?"\\N":"" + passed_timestamp, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(created==null?"\\N":"" + created, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(modified==null?"\\N":"" + modified, delimiters));
  }
  private static final DelimiterSet __inputDelimiters = new DelimiterSet((char) 1, (char) 10, (char) 0, (char) 0, false);
  private RecordParser __parser;
  public void parse(Text __record) throws RecordParser.ParseError {
    if (null == this.__parser) {
      this.__parser = new RecordParser(__inputDelimiters);
    }
    List<String> __fields = this.__parser.parseRecord(__record);
    __loadFromFields(__fields);
  }

  public void parse(CharSequence __record) throws RecordParser.ParseError {
    if (null == this.__parser) {
      this.__parser = new RecordParser(__inputDelimiters);
    }
    List<String> __fields = this.__parser.parseRecord(__record);
    __loadFromFields(__fields);
  }

  public void parse(byte [] __record) throws RecordParser.ParseError {
    if (null == this.__parser) {
      this.__parser = new RecordParser(__inputDelimiters);
    }
    List<String> __fields = this.__parser.parseRecord(__record);
    __loadFromFields(__fields);
  }

  public void parse(char [] __record) throws RecordParser.ParseError {
    if (null == this.__parser) {
      this.__parser = new RecordParser(__inputDelimiters);
    }
    List<String> __fields = this.__parser.parseRecord(__record);
    __loadFromFields(__fields);
  }

  public void parse(ByteBuffer __record) throws RecordParser.ParseError {
    if (null == this.__parser) {
      this.__parser = new RecordParser(__inputDelimiters);
    }
    List<String> __fields = this.__parser.parseRecord(__record);
    __loadFromFields(__fields);
  }

  public void parse(CharBuffer __record) throws RecordParser.ParseError {
    if (null == this.__parser) {
      this.__parser = new RecordParser(__inputDelimiters);
    }
    List<String> __fields = this.__parser.parseRecord(__record);
    __loadFromFields(__fields);
  }

  private void __loadFromFields(List<String> fields) {
    Iterator<String> __it = fields.listIterator();
    String __cur_str = null;
    try {
    __cur_str = __it.next();
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.id = null; } else {
      this.id = Long.valueOf(__cur_str);
    }

    __cur_str = __it.next();
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.user_id = null; } else {
      this.user_id = Integer.valueOf(__cur_str);
    }

    __cur_str = __it.next();
    if (__cur_str.equals("null")) { this.course_id = null; } else {
      this.course_id = __cur_str;
    }

    __cur_str = __it.next();
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.course_edited_timestamp = null; } else {
      this.course_edited_timestamp = java.sql.Timestamp.valueOf(__cur_str);
    }

    __cur_str = __it.next();
    if (__cur_str.equals("null")) { this.course_version = null; } else {
      this.course_version = __cur_str;
    }

    __cur_str = __it.next();
    if (__cur_str.equals("null")) { this.grading_policy_hash = null; } else {
      this.grading_policy_hash = __cur_str;
    }

    __cur_str = __it.next();
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.percent_grade = null; } else {
      this.percent_grade = Double.valueOf(__cur_str);
    }

    __cur_str = __it.next();
    if (__cur_str.equals("null")) { this.letter_grade = null; } else {
      this.letter_grade = __cur_str;
    }

    __cur_str = __it.next();
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.passed_timestamp = null; } else {
      this.passed_timestamp = java.sql.Timestamp.valueOf(__cur_str);
    }

    __cur_str = __it.next();
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.created = null; } else {
      this.created = java.sql.Timestamp.valueOf(__cur_str);
    }

    __cur_str = __it.next();
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.modified = null; } else {
      this.modified = java.sql.Timestamp.valueOf(__cur_str);
    }

    } catch (RuntimeException e) {    throw new RuntimeException("Can't parse input data: '" + __cur_str + "'", e);    }  }

  private void __loadFromFields0(Iterator<String> __it) {
    String __cur_str = null;
    try {
    __cur_str = __it.next();
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.id = null; } else {
      this.id = Long.valueOf(__cur_str);
    }

    __cur_str = __it.next();
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.user_id = null; } else {
      this.user_id = Integer.valueOf(__cur_str);
    }

    __cur_str = __it.next();
    if (__cur_str.equals("null")) { this.course_id = null; } else {
      this.course_id = __cur_str;
    }

    __cur_str = __it.next();
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.course_edited_timestamp = null; } else {
      this.course_edited_timestamp = java.sql.Timestamp.valueOf(__cur_str);
    }

    __cur_str = __it.next();
    if (__cur_str.equals("null")) { this.course_version = null; } else {
      this.course_version = __cur_str;
    }

    __cur_str = __it.next();
    if (__cur_str.equals("null")) { this.grading_policy_hash = null; } else {
      this.grading_policy_hash = __cur_str;
    }

    __cur_str = __it.next();
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.percent_grade = null; } else {
      this.percent_grade = Double.valueOf(__cur_str);
    }

    __cur_str = __it.next();
    if (__cur_str.equals("null")) { this.letter_grade = null; } else {
      this.letter_grade = __cur_str;
    }

    __cur_str = __it.next();
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.passed_timestamp = null; } else {
      this.passed_timestamp = java.sql.Timestamp.valueOf(__cur_str);
    }

    __cur_str = __it.next();
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.created = null; } else {
      this.created = java.sql.Timestamp.valueOf(__cur_str);
    }

    __cur_str = __it.next();
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.modified = null; } else {
      this.modified = java.sql.Timestamp.valueOf(__cur_str);
    }

    } catch (RuntimeException e) {    throw new RuntimeException("Can't parse input data: '" + __cur_str + "'", e);    }  }

  public Object clone() throws CloneNotSupportedException {
    grades_persistentcoursegrade o = (grades_persistentcoursegrade) super.clone();
    o.course_edited_timestamp = (o.course_edited_timestamp != null) ? (java.sql.Timestamp) o.course_edited_timestamp.clone() : null;
    o.passed_timestamp = (o.passed_timestamp != null) ? (java.sql.Timestamp) o.passed_timestamp.clone() : null;
    o.created = (o.created != null) ? (java.sql.Timestamp) o.created.clone() : null;
    o.modified = (o.modified != null) ? (java.sql.Timestamp) o.modified.clone() : null;
    return o;
  }

  public void clone0(grades_persistentcoursegrade o) throws CloneNotSupportedException {
    o.course_edited_timestamp = (o.course_edited_timestamp != null) ? (java.sql.Timestamp) o.course_edited_timestamp.clone() : null;
    o.passed_timestamp = (o.passed_timestamp != null) ? (java.sql.Timestamp) o.passed_timestamp.clone() : null;
    o.created = (o.created != null) ? (java.sql.Timestamp) o.created.clone() : null;
    o.modified = (o.modified != null) ? (java.sql.Timestamp) o.modified.clone() : null;
  }

  public Map<String, Object> getFieldMap() {
    Map<String, Object> __sqoop$field_map = new TreeMap<String, Object>();
    __sqoop$field_map.put("id", this.id);
    __sqoop$field_map.put("user_id", this.user_id);
    __sqoop$field_map.put("course_id", this.course_id);
    __sqoop$field_map.put("course_edited_timestamp", this.course_edited_timestamp);
    __sqoop$field_map.put("course_version", this.course_version);
    __sqoop$field_map.put("grading_policy_hash", this.grading_policy_hash);
    __sqoop$field_map.put("percent_grade", this.percent_grade);
    __sqoop$field_map.put("letter_grade", this.letter_grade);
    __sqoop$field_map.put("passed_timestamp", this.passed_timestamp);
    __sqoop$field_map.put("created", this.created);
    __sqoop$field_map.put("modified", this.modified);
    return __sqoop$field_map;
  }

  public void getFieldMap0(Map<String, Object> __sqoop$field_map) {
    __sqoop$field_map.put("id", this.id);
    __sqoop$field_map.put("user_id", this.user_id);
    __sqoop$field_map.put("course_id", this.course_id);
    __sqoop$field_map.put("course_edited_timestamp", this.course_edited_timestamp);
    __sqoop$field_map.put("course_version", this.course_version);
    __sqoop$field_map.put("grading_policy_hash", this.grading_policy_hash);
    __sqoop$field_map.put("percent_grade", this.percent_grade);
    __sqoop$field_map.put("letter_grade", this.letter_grade);
    __sqoop$field_map.put("passed_timestamp", this.passed_timestamp);
    __sqoop$field_map.put("created", this.created);
    __sqoop$field_map.put("modified", this.modified);
  }

  public void setField(String __fieldName, Object __fieldVal) {
    if ("id".equals(__fieldName)) {
      this.id = (Long) __fieldVal;
    }
    else    if ("user_id".equals(__fieldName)) {
      this.user_id = (Integer) __fieldVal;
    }
    else    if ("course_id".equals(__fieldName)) {
      this.course_id = (String) __fieldVal;
    }
    else    if ("course_edited_timestamp".equals(__fieldName)) {
      this.course_edited_timestamp = (java.sql.Timestamp) __fieldVal;
    }
    else    if ("course_version".equals(__fieldName)) {
      this.course_version = (String) __fieldVal;
    }
    else    if ("grading_policy_hash".equals(__fieldName)) {
      this.grading_policy_hash = (String) __fieldVal;
    }
    else    if ("percent_grade".equals(__fieldName)) {
      this.percent_grade = (Double) __fieldVal;
    }
    else    if ("letter_grade".equals(__fieldName)) {
      this.letter_grade = (String) __fieldVal;
    }
    else    if ("passed_timestamp".equals(__fieldName)) {
      this.passed_timestamp = (java.sql.Timestamp) __fieldVal;
    }
    else    if ("created".equals(__fieldName)) {
      this.created = (java.sql.Timestamp) __fieldVal;
    }
    else    if ("modified".equals(__fieldName)) {
      this.modified = (java.sql.Timestamp) __fieldVal;
    }
    else {
      throw new RuntimeException("No such field: " + __fieldName);
    }
  }
  public boolean setField0(String __fieldName, Object __fieldVal) {
    if ("id".equals(__fieldName)) {
      this.id = (Long) __fieldVal;
      return true;
    }
    else    if ("user_id".equals(__fieldName)) {
      this.user_id = (Integer) __fieldVal;
      return true;
    }
    else    if ("course_id".equals(__fieldName)) {
      this.course_id = (String) __fieldVal;
      return true;
    }
    else    if ("course_edited_timestamp".equals(__fieldName)) {
      this.course_edited_timestamp = (java.sql.Timestamp) __fieldVal;
      return true;
    }
    else    if ("course_version".equals(__fieldName)) {
      this.course_version = (String) __fieldVal;
      return true;
    }
    else    if ("grading_policy_hash".equals(__fieldName)) {
      this.grading_policy_hash = (String) __fieldVal;
      return true;
    }
    else    if ("percent_grade".equals(__fieldName)) {
      this.percent_grade = (Double) __fieldVal;
      return true;
    }
    else    if ("letter_grade".equals(__fieldName)) {
      this.letter_grade = (String) __fieldVal;
      return true;
    }
    else    if ("passed_timestamp".equals(__fieldName)) {
      this.passed_timestamp = (java.sql.Timestamp) __fieldVal;
      return true;
    }
    else    if ("created".equals(__fieldName)) {
      this.created = (java.sql.Timestamp) __fieldVal;
      return true;
    }
    else    if ("modified".equals(__fieldName)) {
      this.modified = (java.sql.Timestamp) __fieldVal;
      return true;
    }
    else {
      return false;    }
  }
}
